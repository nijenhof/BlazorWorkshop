@page "/fetchdata"
@using BlazorWorkshop.Client.Services.Interfaces
@using BlazorWorkshop.Shared
@inject IWeatherForecastService forecastService

<PageTitle>Weather forecast</PageTitle>
<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="WeatherForecast pagination">
        <ul class="pagination">
            <li class="page-item"><a @onclick="Previous" class="page-link">Previous</a></li>
            <li class="page-item"><a @onclick="Next" class="page-link">Next</a></li>
        </ul>
    </nav>
}
@code {
    private int _pageSize = 10;
    private int _currentPage = 1;

    private IEnumerable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await forecastService.GetPaginated(_currentPage, _pageSize)).Items;
    }

    private async Task Next()
    {
        _currentPage++;
        await FetchDataByPagination();
    }

    private async Task Previous()
    {
        if(_currentPage > 0)
        { 
            _currentPage--;
            await FetchDataByPagination();
        }
    }

    private async Task FetchDataByPagination()
    {
        forecasts = null;
        
        var paginatedResponse = await forecastService.GetPaginated(_currentPage, _pageSize);

        forecasts = paginatedResponse.Items;
    }
}